{"version":3,"sources":["modules/loan_calculator/components/Calculator/InputPanel/NumberInput/NumberInput.style.ts","modules/loan_calculator/components/Calculator/InputPanel/NumberInput/NumberInput.tsx","modules/loan_calculator/components/Calculator/InputPanel/InputPanel.style.ts","modules/loan_calculator/components/Calculator/InputPanel/InputPanel.tsx","modules/loan_calculator/components/Calculator/ResultDisplay/ResultDisplay.style.ts","modules/loan_calculator/components/Calculator/ResultDisplay/ResultDisplay.tsx","modules/loan_calculator/components/Calculator/Calculator.style.ts","modules/loan_calculator/components/Calculator/Calculator.tsx","fakeAPI.js","modules/loan_calculator/actions.js","modules/loan_calculator/containers/CalculatorContainer.tsx","modules/loan_calculator/LoanCalculator.tsx","modules/loan_calculator/reducer.ts","store/store.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Title","ErrorText","InputWrapper","NumberInput","value","title","onChange","error","Input","type","defaultProps","InputPanel","inputChangeHandler","calculateMonthlyInstallment","amountValue","durationValue","useState","errorAmount","setErrorAmount","errorDuration","setErrorDuration","onInputChange","event","target","Button","onClick","duration","amount","durationError","amountError","variant","color","ResultDisplay","monthlyInstallment","LoadingWrapper","Calculator","changeAmount","changeDuration","loading","CircularProgress","Paper","API","post","Promise","resolve","setTimeout","data","Math","floor","random","onAmountChange","dispatch","onDurationChange","getState","a","response","message","connect","state","actions","LoanCalculator","reducer","action","store","applyMiddleware","reduxThunk","createStore","createStoreWithMiddleware","LoanCalculatorReducer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f5dfb8b.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n    display: flex;\n    position: relative;\n    flex-direction: column;\n`\n\nexport const Title = styled.div`\n    display: flex;\n    align-items: flex-end;\n    font-size: 14px;\n    font-weight: bold;\n    margin-right: 6px;\n    padding-bottom: 4px;\n`\nexport const ErrorText = styled.div`\n    display: flex;\n    font-size: 11px;\n    color: red;\n    height: 30px;\n    position: absolute;\n    bottom: -30px;\n`\n\nexport const InputWrapper = styled.div`\n    display: flex;\n \n`\n\n\n","import React, { FC, ChangeEventHandler } from \"react\";\nimport { Input } from \"@material-ui/core\";\nimport { Container, Title, ErrorText, InputWrapper } from \"./NumberInput.style\";\n\ninterface Props {\n    value: string | number;\n    title?: string;\n    error?: string;\n    onChange: ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement>;\n}\n\nconst NumberInput: FC<Props> = ({ value, title, onChange, error }) => {\n    return (\n        <Container>\n            <Title>{title}</Title>\n            <InputWrapper>\n                <Input\n                    error={!!error}\n                    type={\"number\"}\n                    value={value}\n                    onChange={onChange}\n                />\n                <ErrorText>{error}</ErrorText>\n            </InputWrapper>\n        </Container>\n    );\n};\n\nNumberInput.defaultProps = {\n    value: \"\"\n};\n\nexport default NumberInput;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n    display: flex;\n    align-items: center;\n    height: 40px;\n    & > * {\n        margin-right: 10px;\n    }\n`\n","import React, { useState, FC, ChangeEventHandler } from \"react\";\nimport { Input, Button } from \"@material-ui/core\";\nimport NumberInput from \"./NumberInput/NumberInput\";\nimport { Container } from \"./InputPanel.style\";\n\ninterface Props {\n    inputChangeHandler: (value: number, type: string) => void;\n    calculateMonthlyInstallment: () => void;\n    amountValue: number | string;\n    durationValue: number | string;\n}\n\nconst InputPanel: FC<Props> = ({\n    inputChangeHandler,\n    calculateMonthlyInstallment,\n    amountValue,\n    durationValue\n}) => {\n    const [errorAmount, setErrorAmount] = useState<string>(\"\");\n    const [errorDuration, setErrorDuration] = useState<string>(\"\");\n\n    const onInputChange = (\n        type: string\n    ): ChangeEventHandler<HTMLTextAreaElement | HTMLInputElement> => event => {\n        if (type === \"amount\") {\n            setErrorAmount(\"\");\n        } else if (type === \"duration\") {\n            setErrorDuration(\"\");\n        }\n        inputChangeHandler(+event.target.value, type);\n    };\n\n    const validateDuration = (duration: number | string) => {\n        if (typeof duration === \"number\") {\n            if (duration < 1 || duration > 5) {\n                return \"Duration should be in range 1 and 5\";\n            }\n            return \"\";\n        }\n        return \"Please enter a valid number\";\n    };\n\n    const validateAmount = (amount: number | string) => {\n        if (typeof amount === \"number\") {\n            if (amount < 10000 || amount > 100000) {\n                return \"Amount should be in range 10000 and 100000\";\n            }\n            return \"\";\n        }\n        return \"Please enter a valid number\";\n    };\n\n    const onSubmit = () => {\n        const durationError = validateDuration(durationValue);\n        const amountError = validateAmount(amountValue);\n        if (!durationError && !amountError) {\n            calculateMonthlyInstallment();\n        }\n        setErrorAmount(amountError);\n        setErrorDuration(durationError);\n    };\n\n    return (\n        <Container>\n            <NumberInput\n                error={errorAmount}\n                value={amountValue}\n                onChange={onInputChange(\"amount\")}\n                title=\"Amount\"\n            />\n            <NumberInput\n                error={errorDuration}\n                value={durationValue}\n                onChange={onInputChange(\"duration\")}\n                title=\"Duration\"\n            />\n            <Button onClick={onSubmit} variant=\"contained\" color=\"primary\">\n                OK\n            </Button>\n        </Container>\n    );\n};\n\nexport default InputPanel;\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n    display: flex;\n    align-items: flex-end;\n    height: 50px;\n    margin-top: 10px;\n`;\nexport const Title = styled.div`\n    display: flex;\n    margin-right: 5px;\n`;\n","import React, { FC } from \"react\";\nimport { Container, Title } from \"./ResultDisplay.style\";\n\ninterface Props {\n    monthlyInstallment: number | string;\n}\n\nconst ResultDisplay: FC<Props> = ({ monthlyInstallment }) => {\n    return (\n        <Container>\n            <Title>Monthly Installment:</Title>\n            <b> {monthlyInstallment ? ` ${\" \"+monthlyInstallment} EUR` : \"\"}</b>\n        </Container>\n    );\n};\n\nexport default ResultDisplay;\n","import styled from \"styled-components\";\n\nexport const LoadingWrapper = styled.div`\n    display: flex;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    justify-content: center;\n    align-items: center;\n    background-color: white;\n    z-index:2;\n    opacity: .8;\n`;\n\nexport const Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    min-width: 416px;\n    width: 416px;\n    height: 160px;\n    position: relative;\n    \n    & > * {\n        height: 100%;\n        padding: 20px;\n        box-sizing: border-box;\n    }\n`;\n","import React, { FC } from \"react\";\nimport InputPanel from \"./InputPanel/InputPanel\";\nimport ResultDisplay from \"./ResultDisplay/ResultDisplay\";\nimport { Paper, CircularProgress } from \"@material-ui/core\";\nimport { Container, LoadingWrapper } from \"./Calculator.style\";\n\ninterface Props {\n    changeAmount: (amount: number) => void;\n    changeDuration: (duration: number) => void;\n    amountValue: number | string;\n    durationValue: number | string;\n    monthlyInstallment: number | string;\n    calculateMonthlyInstallment: () => void;\n    loading: boolean;\n}\n\nconst Calculator: FC<Props> = ({\n    changeAmount,\n    changeDuration,\n    amountValue,\n    durationValue,\n    monthlyInstallment,\n    calculateMonthlyInstallment,\n    loading\n}) => {\n    const inputChangeHandler = (value: number, type: string) => {\n        if (type === \"amount\") {\n            changeAmount(value);\n        } else if (type === \"duration\") {\n            changeDuration(value);\n        }\n    };\n\n    return (\n        <Container>\n            {loading && (\n                <LoadingWrapper>\n                    <CircularProgress />\n                </LoadingWrapper>\n            )}\n            <Paper>\n                <InputPanel\n                    calculateMonthlyInstallment={calculateMonthlyInstallment}\n                    durationValue={durationValue}\n                    amountValue={amountValue}\n                    inputChangeHandler={inputChangeHandler}\n                />\n                <ResultDisplay monthlyInstallment={monthlyInstallment} />\n            </Paper>\n        </Container>\n    );\n};\n\nexport default Calculator;\n","const API = {\n    post({ duration, amount }) {\n        return new Promise(resolve => {\n            setTimeout(() => {\n                resolve({\n                    data: {\n                        amount,\n                        duration,\n                        // fake formula\n                        monthlyInstallment: Math.floor((amount / (duration * 12)) )\n                    }\n                });\n            }, Math.random()*2000);\n        });\n    }\n};\n\nexport default API;\n","import API from \"../../fakeAPI\";\n\nexport const onAmountChange = amount => dispatch => {\n    dispatch({ type: \"CHANGE_AMOUNT\", amount });\n};\n\nexport const onDurationChange = duration => dispatch => {\n    dispatch({ type: \"CHANGE_DURATION\", duration });\n};\n\nexport const calculateMonthlyInstallment = () => async (dispatch, getState) => {\n    const { amount, duration } = getState();\n    // Simulation of API-call\n    dispatch({ type: \"SET_LOADING\", loading: true });\n    try {\n        const response = await API.post({ amount, duration });\n        dispatch({\n            type: \"SET_MONTHLY_INSTALLMENT\",\n            monthlyInstallment: response.data.monthlyInstallment\n        });\n    } catch (e) {\n        // Custom error handle goes here ...\n     \n        dispatch({ type: \"SET_ERROR\", message: e.message });\n    }\n    dispatch({ type: \"SET_LOADING\", loading: false }); \n};\n","import React, { FC } from \"react\";\nimport Calculator from \"../components/Calculator/Calculator\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"../actions\";\nimport { Istate } from \"../reducer\";\n\ninterface Props {\n    onAmountChange: (value: number) => void;\n    onDurationChange: (value: number) => void;\n    calculateMonthlyInstallment: () => void;\n    amountValue: number | string;\n    durationValue: number | string;\n    monthlyInstallment: number | string;\n    loading: boolean;\n}\n\nconst CalculatorContainer: FC<Props> = ({\n    onAmountChange,\n    onDurationChange,\n    calculateMonthlyInstallment,\n    amountValue,\n    durationValue,\n    monthlyInstallment,\n    loading\n}) => {\n    return (\n        <Calculator\n            loading={loading}\n            calculateMonthlyInstallment={calculateMonthlyInstallment}\n            amountValue={amountValue}\n            durationValue={durationValue}\n            changeAmount={onAmountChange}\n            changeDuration={onDurationChange}\n            monthlyInstallment={monthlyInstallment}\n        />\n    );\n};\n\nconst mapStateToProps = (state: Istate) => {\n    return {\n        loading: state.loading,\n        amountValue: state.amount,\n        durationValue: state.duration,\n        monthlyInstallment: state.monthlyInstallment\n    };\n};\n\nexport default connect(\n    mapStateToProps,\n    actions\n)(CalculatorContainer);\n","import React from 'react';\nimport CalculatorContainer from './containers/CalculatorContainer'\n\nconst LoanCalculator = () => {\n    return <CalculatorContainer/>\n}\n\nexport default LoanCalculator;","interface Iaction {\n    type: string;\n    [key: string]: any;\n}\n\nexport interface Istate {\n    amount: number | string;\n    duration: number | string;\n    monthlyInstallment: number | string;\n    loading: boolean;\n}\n\nconst reducer = (\n    state: Istate = {\n        amount: \"\",\n        duration: \"\",\n        monthlyInstallment: \"\",\n        loading: false\n    },\n    action:Iaction\n) => {\n    switch (action.type) {\n        case \"SET_ERROR\":\n            // Custom error handle goes here ...\n            return state;\n        case \"SET_LOADING\":\n            return { ...state, loading: action.loading };\n        case \"SET_MONTHLY_INSTALLMENT\":\n            return { ...state, monthlyInstallment: action.monthlyInstallment };\n        case \"CHANGE_AMOUNT\":\n            return { ...state, amount: action.amount };\n        case \"CHANGE_DURATION\":\n            return { ...state, duration: action.duration };\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import {createStore, applyMiddleware} from 'redux';\nimport reduxThunk from 'redux-thunk';\nimport LoanCalculatorReducer from '../modules/loan_calculator/reducer'\n\nconst createStoreWithMiddleware = applyMiddleware(reduxThunk)(createStore);\nconst store = createStoreWithMiddleware(LoanCalculatorReducer);\n\nexport default store;","import React from \"react\";\nimport LoanCalculator from \"./modules/loan_calculator/LoanCalculator\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/store\";\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <LoanCalculator />\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}